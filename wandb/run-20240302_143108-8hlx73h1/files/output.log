
epoch: 0
lagrangian identity, x.shape: torch.Size([32, 1, 28, 28])
lagrangian identity, l: tensor(9206.6289, device='mps:0')
forward, x.shape: torch.Size([32, 1, 28, 112])
forward, g.shape: torch.Size([32, 1, 28, 112])
Traceback (most recent call last):
  File "/Users/ethanreid/Documents/DevProjects/Research/DeepHopfieldNetworks/run_dhn_diffusion.py", line 139, in <module>
    manager.train()
  File "/Users/ethanreid/Documents/DevProjects/Research/DeepHopfieldNetworks/run_dhn_diffusion.py", line 84, in train
    loss = p_losses(self.model, batch, t, loss_type="huber")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/ethanreid/Documents/DevProjects/Research/DeepHopfieldNetworks/scripts/diffusion.py", line 57, in p_losses
    predicted_noise = denoise_model(x_noisy)
                      ^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/ethanreid/Documents/DevProjects/Books/advancedDeepLearningWithPython/.venv/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1510, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/ethanreid/Documents/DevProjects/Books/advancedDeepLearningWithPython/.venv/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1519, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/ethanreid/Documents/DevProjects/Research/DeepHopfieldNetworks/scripts/energy_model.py", line 26, in forward
    _, e_hop = self.hop(g_1)
               ^^^^^^^^^^^^^
  File "/Users/ethanreid/Documents/DevProjects/Books/advancedDeepLearningWithPython/.venv/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1510, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/ethanreid/Documents/DevProjects/Books/advancedDeepLearningWithPython/.venv/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1519, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/ethanreid/Documents/DevProjects/Research/DeepHopfieldNetworks/dhn/layers.py", line 21, in forward
    g_2, e_g_2 = self.neuron(x_2)
                 ^^^^^^^^^^^^^^^^
  File "/Users/ethanreid/Documents/DevProjects/Books/advancedDeepLearningWithPython/.venv/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1510, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/ethanreid/Documents/DevProjects/Books/advancedDeepLearningWithPython/.venv/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1519, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/ethanreid/Documents/DevProjects/Research/DeepHopfieldNetworks/dhn/neuron.py", line 25, in forward
    e_g =self.energy(g, x)
         ^^^^^^^^^^^^^^^^^
  File "/Users/ethanreid/Documents/DevProjects/Research/DeepHopfieldNetworks/dhn/neuron.py", line 17, in energy
    e = torch.matmul(g, x).sum() - self._lagrangian(x)
        ^^^^^^^^^^^^^^^^^^
TypeError: matmul(): argument 'input' (position 1) must be Tensor, not ReLU